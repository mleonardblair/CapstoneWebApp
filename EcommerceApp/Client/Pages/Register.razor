@attribute [Route(RouteConstants.Register)]
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using EcommerceApp.Client.Shared
@using EcommerceApp.Server.Models;
<PageTitle>Register</PageTitle>
<MudContainer Class="lg-py-2" Style="padding-top:10rem">
    <MudMainContent>
        <MudText Typo="Typo.h3" Style="text-align:center;">Register</MudText>
        <MudGrid Class="login-grid" Style="display:flex; justify-content:center;align-self:center; padding-top:100px;">
            <MudItem xs="12" lg="6" xl="6" Style="align-self:center">
                <EditForm Model="user" OnValidSubmit="HandleRegistration">
                    @* Looks for validation annotations on model *@
                    <DataAnnotationsValidator/>
                    <div class="mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="user.Email" class="form-control"/>
                        <ValidationMessage For="@(()=> user.Email)"/>
                    </div>
                     <div class="mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"/>
                        @* Added validation message for password confirmation and removed validation summary. *@
                        <ValidationMessage For="@(()=> user.Password)" />
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword">Confirm Password</label>
                        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
                        @* Added validation message for password confirmation and removed validation summary. *@
                        <ValidationMessage For="@(()=> user.ConfirmPassword)" />
                    </div>
                    <button type="submit" class="btn btn-primary my-5 w-100 w-md-auto w-md-50">Register</button>
                </EditForm>
                <ReusableResultSnackbar @ref="resultSnackbar"
                                            Message="@Message"
                                            Severity="@s" />

              
            </MudItem>
        </MudGrid>
    </MudMainContent>
</MudContainer>


@code {
    UserRegister user = new UserRegister();
    Severity s;
    private string Message = string.Empty;
    private ReusableResultSnackbar? resultSnackbar;

    private void ShowSnackbar()
    {
        resultSnackbar?.Show();
    }
    /// <summary>
    /// Displays a success or warning message depending on the result of the registration.
    /// </summary>
    async void HandleRegistration()
    {
        var result = await AuthService.RegisterUser(user);
        Message = result.Message;
        s = result.Success ? Severity.Success : Severity.Warning;
        // Request the UI to re-render after state changes
        StateHasChanged();

        // Then show the snackbar
        ShowSnackbar();

        Task.Delay(1000);
        // Navigate to login page
        NavigationManager.NavigateTo(RouteConstants.Login);
    }
}
