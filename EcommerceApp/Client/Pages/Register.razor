@attribute [Route(RouteConstants.Register)]
@inject IAuthService AuthService

@using EcommerceApp.Client.Shared
@using EcommerceApp.Server.Models;
<PageTitle>Register</PageTitle>
<MudText Typo="Typo.h3">Register</MudText>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    @* Looks for validation annotations on model *@
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"/>
        <ValidationMessage For="@(()=> user.Email)"/>
    </div>
     <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"/>
        @* Added validation message for password confirmation and removed validation summary. *@
        <ValidationMessage For="@(()=> user.Password)" />
    </div>
    <div class="mb-3">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password" />
        @* Added validation message for password confirmation and removed validation summary. *@
        <ValidationMessage For="@(()=> user.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>
<ReusableResultSnackbar @ref="resultSnackbar"
                        Message="@message"
                        Severity="@s" />


@code {
    UserRegister user = new UserRegister();
    Severity s;
    string message = string.Empty;
    private ReusableResultSnackbar? resultSnackbar;

    private void ShowSnackbar()
    {
        resultSnackbar?.Show();
    }
    /// <summary>
    /// Displays a success or warning message depending on the result of the registration.
    /// </summary>
    async void HandleRegistration()
    {
        var result = await AuthService.RegisterUser(user);
        message = result.Message;
        s = result.Success ? Severity.Success : Severity.Warning;
        // Request the UI to re-render after state changes
        StateHasChanged();

        // Then show the snackbar
        ShowSnackbar();
    }
}
