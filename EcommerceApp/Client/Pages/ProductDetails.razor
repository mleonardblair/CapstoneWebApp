@attribute [Route(RouteConstants.ShopProductDetails)]
@using EcommerceApp.Shared.DTOs;
@inject IProductService ProductService;
@inject ICartService CartService;
@inject ITagService TagService;
<h3>ProductDetails</h3>

@if (product == null)
{
    <span>@message</span>
}
else
{
    var imageSrc = product.ImageURI ?? "/images/img_placeholder.jpg";

    <div class="media">
        <div class="media-img-wrapper me-2">
            <img class="media-img" src="@imageSrc" alt="@product.Name" />
            <div class="small-img-container">
                <!-- Display other images, this section can be enhanced later to dynamically load product images if available -->
            </div>
        </div>
        <MudElement class="container media-body">
            <h2 class="mb-0">@product.Name</h2>
            <p>@product.Description</p>
            @if (TagDtos != null && TagDtos.Count > 0)
            {
                <MudChipSet>
                    @foreach (var tag in TagDtos)
                    {
                        @if (!TagColors.ContainsKey(tag.Name))
                        {
                            TagColors[tag.Name] = MudMethods.GetRandomColor(TagColors);
                        }
                        <MudChip 
                            Variant="Variant.Text"
                            Text="@tag.Name" 
                            Color="@TagColors[tag.Name]" 
                            OnClose="() => RemoveTag(tag)" 

                            @key="tag.Id">
                        </MudChip>
                    }
                </MudChipSet>
            }
            <h4 class="price">
                $@product.Price
            </h4>
            <MudButton OnClick="@AddToCart">
            Add to Cart
            </MudButton>
        </MudElement>
      
    </div>
}
@*TODO USE ON CLOSE BEHAVIOUR ON THE SHOP BASE PAGE*@
@code {
    private Dictionary<string, MudBlazor.Color> TagColors = new Dictionary<string, MudBlazor.Color>();
    private ProductDto? product = null;
    private List<TagDto> TagDtos = new List<TagDto>();
    public string message = "Your Product Loading...";
    [Parameter]
    public Guid ProductId { get; set; }
    private async Task AddToCart()
    {
        var cartItem = new CartItemDto
            {
                ProductId = ProductId,
                Id = Guid.NewGuid(),
                Quantity = 1,
                

        };
        await CartService.AddToCart(cartItem);
    }
    //{
    //public Guid Id { get; set; }
    //public Guid ShoppingCartId { get; set; }
    //public Guid ProductId { get; set; }
    //public Guid Quantity { get; set; }
    //public DateTime DateCreated { get; set; } = DateTime.UtcNow;
    //}
    private async Task DeleteProduct()
    {
        var response = await ProductService.DeleteProductByIdAsync(ProductId);
    }

    protected override async Task OnParametersSetAsync()
    {
        var result = await ProductService.GetProductByIdAsync(ProductId);

        if (!result.Success)
        {
            message = result.Message;
            return;
        }

        product = result.Data;
        TagDtos = await GetSelectedProductFlairTagsAsync();

        // Ensure each tag has a color associated with it
        //foreach (var tag in TagDtos)
        //{
        //    if (!TagColors.ContainsKey(tag.Name))
        //    {
        //        TagColors[tag.Name] = MudMethods.GetRandomColor(TagColors);
        //    }
        //}
    }

    private async Task<List<TagDto>> GetSelectedProductFlairTagsAsync()
    {
        List<TagDto> tagDtos = new List<TagDto>();

        if (product == null || product.ProductTags == null)
            return tagDtos;

        // Fetch the corresponding TagDto for each TagId
        foreach (var tagId in product.ProductTags.Select(x => x.TagId))
        {
            var response = await TagService.GetTagByIdAsync(tagId);
            if (response.Success)
            {
                tagDtos.Add(response.Data);
            }
        }

        return tagDtos;
    }
    private void RemoveTag(TagDto tag)
    {
        if (TagDtos.Contains(tag))
        {
            TagDtos.Remove(tag);
            TagColors.Remove(tag.Name); // Don't forget to remove the color as well
            StateHasChanged(); // Update the UI
        }
    }

   
}
