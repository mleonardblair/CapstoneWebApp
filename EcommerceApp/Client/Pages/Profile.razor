@page "/account-dashboard/profile"
@page "/admin-dashboard/profile"
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService    
@attribute [Authorize]
<AuthorizeView>
        <MudText Class="d-flex align-self-center" Typo="Typo.h6">You are logged in. @context.User!.Identity!.Name</MudText>
    @if(@context.User!.Identity!.Name != null)
    {
        user.Email = @context.User.Identity.Name;
    }
</AuthorizeView>
<PageTitle>Profile</PageTitle>
        <MudContainer Class="lg-py-2" Style="padding-top:10rem">
            <MudMainContent>
        <MudGrid Style="justify-content:center;">
            <MudItem xs="12" lg="12" xl="12">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="8" md="6" lg="6" xl="6">
                        <MudText Typo="Typo.h5">Address Form</MudText>
                        <AddressForm />
                    
                   
                         <hr style="border:2px solid black; "/>
                    </MudItem>
                </MudGrid>
            </MudItem>
           
            <MudItem xs="12" lg="12" xl="12">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="8" md="6" lg="6" xl="6">
                        <MudText Typo="Typo.h5">Change User Info</MudText>
                        <EditForm Model="user" OnValidSubmit="ChangeUserInfo">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <div class="mb-3">
                                <label for="email">Email</label>
                                <InputText id="email" @bind-Value="user.Email" class="form-control" type="email" />
                                @* Added validation message for password confirmation and removed validation summary. *@
                                <ValidationMessage For="@(()=> user.Email)" />
                            </div>
                            <div class="mb-3">
                                <label for="firstName">First Name</label>
                                <InputText id="firstName" @bind-Value="user.FirstName" class="form-control" type="text" />
                                @* Added validation message for password confirmation and removed validation summary. *@
                                <ValidationMessage For="@(()=> user.FirstName)" />
                            </div>
                            <div class="mb-3">
                                <label for="lastName">Last Name</label>
                                <InputText id="lastName" @bind-Value="user.LastName" class="form-control" type="text" />
                                @* Added validation message for password confirmation and removed validation summary. *@
                                <ValidationMessage For="@(()=> user.LastName)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </EditForm>
                    
                   
                        <hr style="border:2px solid black; " />
                    </MudItem>
                </MudGrid>
            </MudItem>
            <hr/>
            <MudItem xs="12" lg="12" xl="12">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="8" md="6" lg="6" xl="6">
                        <ReusableResultSnackbar @ref="resultSnackbar"
                                                Message="@message"
                                                Severity="@s" />


                        <MudText Typo="Typo.h5">Change Password</MudText>
                        <EditForm Model="request" OnValidSubmit="ChangePassword">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                                <div class="mb-3">
                                <label for="password">New Password</label>
                                <InputText id="password" @bind-Value="request.Password" class="form-control" type="password"/>
                                @* Added validation message for password confirmation and removed validation summary. *@
                                <ValidationMessage For="@(()=> request.Password)" />
                            </div>
                            <div class="mb-3">
                                <label for="confirmPassword">Confirm New Password</label>
                                <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
                                @* Added validation message for password confirmation and removed validation summary. *@
                                <ValidationMessage For="@(()=> request.ConfirmPassword)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Update Password</button>
                        </EditForm>

                    </MudItem>
                </MudGrid>
            </MudItem>

        </MudGrid>
    </MudMainContent>
</MudContainer>
@code {
    AppUserDto user = new AppUserDto();
    UserChangePassword request = new UserChangePassword();
    string message = string.Empty;
    Severity s;
    private ReusableResultSnackbar? resultSnackbar;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var email = authState.User.FindFirst(ClaimTypes.Email)?.Value;
        if (!string.IsNullOrEmpty(email))
        {
            user.Email = email;
        }
        // It's also a good idea to load the first and last name if available
        // This assumes that you have the claims for first name and last name set up
        user.FirstName = authState.User.FindFirst(ClaimTypes.GivenName)?.Value;
        user.LastName = authState.User.FindFirst(ClaimTypes.Surname)?.Value;

        await base.OnInitializedAsync();
    }
    private async Task ChangeUserInfo()
    {
        var result = await AuthService.UpdateUser(user);
        message = result.Message;
        s = result.Success ? Severity.Success : Severity.Warning;
        StateHasChanged(); // Request UI update
        ShowSnackbar();
    }

    private async Task ChangePassword()
    {
        var result = await AuthService.ChangePassword(request);
        message = result.Message;
        s = result.Success ? Severity.Success : Severity.Warning;
        StateHasChanged(); // Request UI update
        ShowSnackbar();
    }
    

    private void ShowSnackbar()
    {
        resultSnackbar?.Show();
    }
   
}