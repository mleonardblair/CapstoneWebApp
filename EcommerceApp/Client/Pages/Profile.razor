@page "/account-management/profile"
@using Microsoft.AspNetCore.Authorization;
@inject IAuthService AuthService    
@attribute [Authorize]
<AuthorizeView>
        <p>You are logged in. @context.User.Identity.Name</p>
</AuthorizeView>
<MudContainer>



    <MudText Typo="Typo.h5">Change User Info</MudText>
    <EditForm Model="user" OnValidSubmit="ChangeUserInfo">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-3">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="user.Email" class="form-control" type="email" />
            @* Added validation message for password confirmation and removed validation summary. *@
            <ValidationMessage For="@(()=> user.Email)" />
        </div>
        <div class="mb-3">
            <label for="firstName">First Name</label>
            <InputText id="firstName" @bind-Value="user.FirstName" class="form-control" type="text" />
            @* Added validation message for password confirmation and removed validation summary. *@
            <ValidationMessage For="@(()=> user.FirstName)" />
        </div>
        <div class="mb-3">
            <label for="lastName">Last Name</label>
            <InputText id="lastName" @bind-Value="user.LastName" class="form-control" type="text" />
            @* Added validation message for password confirmation and removed validation summary. *@
            <ValidationMessage For="@(()=> user.LastName)" />
        </div>
        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
    <ReusableResultSnackbar @ref="resultSnackbar"
                            Message="@message"
                            Severity="@s" />


    <MudText Typo="Typo.h5">Change Password</MudText>
    <EditForm Model="request" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator></DataAnnotationsValidator>
         <div class="mb-3">
            <label for="password">New Password</label>
            <InputText id="password" @bind-Value="request.Password" class="form-control" type="password"/>
            @* Added validation message for password confirmation and removed validation summary. *@
            <ValidationMessage For="@(()=> request.Password)" />
        </div>
        <div class="mb-3">
            <label for="confirmPassword">Confirm New Password</label>
            <InputText id="confirmPassword" @bind-Value="request.ConfirmPassword" class="form-control" type="password" />
            @* Added validation message for password confirmation and removed validation summary. *@
            <ValidationMessage For="@(()=> request.ConfirmPassword)" />
        </div>
        <button type="submit" class="btn btn-primary">Update Password</button>
    </EditForm>

</MudContainer>
@code {
    AppUserDto user = new AppUserDto();
    UserChangePassword request = new UserChangePassword();
    string message = string.Empty;
    Severity s;
    private ReusableResultSnackbar? resultSnackbar;
    private async Task ChangeUserInfo()
    {
        var result = await AuthService.UpdateUser(user);
        message = result.Message;
        s = result.Success ? Severity.Success : Severity.Warning;
        StateHasChanged(); // Request UI update
        ShowSnackbar();
    }

    private async Task ChangePassword()
    {
        var result = await AuthService.ChangePassword(request);
        message = result.Message;
        s = result.Success ? Severity.Success : Severity.Warning;
        StateHasChanged(); // Request UI update
        ShowSnackbar();
    }
    

    private void ShowSnackbar()
    {
        resultSnackbar?.Show();
    }
   
}