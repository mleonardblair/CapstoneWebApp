@using Microsoft.AspNetCore.WebUtilities;
@attribute [Route(RouteConstants.Login)]
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorageService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
<PageTitle>Login</PageTitle>
<MudContainer Class="lg-py-2" Style="padding-top:10rem">
    <MudMainContent>
        <MudText Typo="Typo.h3" Style="text-align:center;">Login</MudText>
        <MudGrid Class="login-grid" Style="display:flex; justify-content:center;align-self:center; padding-top:100px;">
            <MudItem xs="12" lg="6" xl="6" Style="align-self:center">
                <EditForm Model="user" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="user.Email" class="form-control" />
                        <ValidationMessage For="@(()=> user.Email)" />
                    </div>
                    <div class="mb-3">
                        <label for="password">Password</label>
                        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                        @* Added validation message for password confirmation and removed validation summary. *@
                        <ValidationMessage For="@(()=> user.Password)" />
                    </div>
                 
                     <button type="submit" class="btn btn-primary my-5 w-100 w-md-auto w-md-50">Sign In</button>
                    <ReusableResultSnackbar @ref="resultSnackbar"
                                            Message="@Message"
                                            Severity="@s" />

                </EditForm>
            </MudItem>
        </MudGrid>
    </MudMainContent>
</MudContainer>
@code {
    private UserLogin user = new UserLogin();
    private ReusableResultSnackbar? resultSnackbar;
    private string Message = string.Empty;
    private Severity s;
    private void ShowSnackbar() => resultSnackbar?.Show();
    private string returnUrl = string.Empty;

    protected override void OnInitialized(){
        // Get absolute uri from browser.
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        // Get the return url to redirect the user to after login.
        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var param)){
            returnUrl = param.First();
        }
    }
    private async Task HandleLogin()
    {
        var result = await AuthService.LoginUser(user);
        if (result.Success)
        {
            Message = result.Message;

            await LocalStorageService.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            ShowSnackbar();
            // Wait 1 second so it shows the snackbar before redirecting.
            NavigationManager.NavigateTo("/");
        } else
        {
            Message = result.Message;
        }
    }
  
}