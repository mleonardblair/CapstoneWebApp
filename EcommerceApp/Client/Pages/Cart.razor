@attribute [Route(RouteConstants.ShoppingCart)]
@inject ICartService CartService
@inject IOrderService OrderService
@implements IDisposable
@inject IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
<PageTitle>Shopping Cart</PageTitle>
<h3> Shopping Cart </h3>

@if (cartProducts == null || cartProducts.Count == 0)
{
    <MudText Typo="Typo.body1">
        @message
    </MudText>
    <MudImage Src="/emptycart.png"
          Alt=" a highly stylized empty shopping cart adorned with vines, suitable for an ecommerce website and set against a white background"
          Style="max-width:300px; max-height:300px; object-fit:contain;" />
}
else if (orderPlaced)
{
    <MudText Typo="Typo.body1">
        Thanks For Your Order!
    </MudText>
    <div class="display: flex; align-items:center; justify-content:center">
        <MudImage 
            Src="/successcheckout.png" 
            Alt="A highly stylized 2.5D image representing a successful order for an ecommerce website. The image includes a large, vibrant green checkmark in the center" 
            Style="max-width:300px; max-height:300px; object-fit:contain;" />
    </div>
}else
{
    
        <div style="display:flex; flex-direction:row">
            <MudPaper Style="display:flex; flex-direction:column; align-items:center; justify-content:flex-start; padding: 2rem; min-height: 50vh; width:80%; max-width:1000px; margin: 2rem auto; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                <div style="flex: 3; margin-right: 1rem;"> <!-- Adjust the flex value as needed -->
                    <MudList Style="width:100%; padding: 1rem 0;">
                        @foreach (var product in cartProducts)
                        {
                            <MudListItem>
                                <MudCard Class="bg-light border" Style="width:100%; margin:10px;">
                                    <MudCardContent>
                                        <MudGrid>
                                            <MudItem xs="12" sm="3" Class="d-flex align-items-center justify-content-center">
                                                <MudImage Src="@product.ImageUrl" Alt="@product.Description" Style="max-width:100%; max-height:200px; object-fit:contain;" />
                                            </MudItem>
                                            <MudItem xs="12" md="9">
                                                <MudText Typo="Typo.subtitle1" GutterBottom>
                                                    <a href="/shop/product/@product.ProductId">@product.Title</a>
                                                </MudText>
                                                <div class="mb-2">
                                                @foreach (var tag in product.Tags)
                                                    {
                                                        <MudChip Text="@tag" Color="Color.Primary" Class="mr-1" />
                                                    }
                                                </div>
                                                    <MudText Typo="Typo.h6">@product.Price.ToString("C")</MudText>
                                            </MudItem>                          
                                        </MudGrid>
                                    </MudCardContent>
                                    <MudCardActions Style="padding: 15px; justify-content:space-between;">
                                        <div class="d-flex justify-content-start">
                                            <MudIconButton Color="Color.Dark" Icon="@Icons.Material.Filled.RemoveCircleOutline" OnClick="@( () => Decrement(product))" Size="Size.Small" />

                                            <MudNumericField Variant="Variant.Text"
                                                     Style="width:100px; margin:auto; text-align:center; border: 1px solid black;"
                                                     Class="px-md-2"
                                                     @bind-Value="@product.Quantity"
                                                                      ReadOnly Min="1"
                                                     Max="99"
                                                                      DisableUnderLine
                                                                      HideSpinButtons />

                                            <MudIconButton Color="Color.Dark" Icon="@Icons.Material.Filled.AddCircleOutline" OnClick="@( () => Increment(product))" Size="Size.Small" />
                                        </div>
                                        <div class="d-flex justify-content-end">
                                             <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@( () => RemoveProductFromCart(product.ProductId))">Remove</MudButton>
                                        </div>
                                    </MudCardActions>
                                </MudCard>
                            </MudListItem>
                        }
                    </MudList>
                </div>
            </MudPaper>

        <div class="display: flex; align-items:center; justify-content:center">
            <MudButton Color="Color.Success" Variant="Variant.Outlined" OnClick="@( () =>Placeorder())">Place Order</MudButton>
        </div>
    </div>

}
@code {
    bool orderPlaced = false;
    List<CartProductResponse> cartProducts = new List<CartProductResponse>();
    string message = "Loading Cart...";



    // Method to update the quantity of a product in the cart.
    private async void UpdateQuantity(CartProductResponse product, int newQuantity)
    {
        // Update the product's quantity in the cart
        product.Quantity = newQuantity;
        // Update the cart in the local storage
        CartItemDto cidto = new CartItemDto()
        {
            ShoppingCartId = product.ShoppingCartId,
            Id = product.Id,
            DateCreated = product.DateCreated,
            ProductId = product.ProductId,
            Quantity = product.Quantity
        };
        await CartService.UpdateQuantity(cidto);
        // Add this line to refresh the UI
        StateHasChanged();
    }
    private async Task RemoveProductFromCart(Guid productId)
    {
        await CartService.RemoveProductFromCart(productId);
        await LoadCart();
    }


    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        await CartService.CreateNewShoppingCart();




        //TODO REMOVE THIS IS ALL DEBUGGING CODE

        // Get the logged in users user id.
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            Guid.TryParse(userId, out Guid userIdGuid);
            if(userIdGuid != Guid.Empty)
            {
                await CartService.GetShoppingCartByUserId(userIdGuid);
            }
            Console.WriteLine($"User ID: {userId}");
        }
        else
        {
            Console.WriteLine("User is not authenticated.");
        }

        CartService.OnChange += StateHasChanged; // Subscribe to the event
        await LoadCart();
    }

    public void Dispose() // Don't forget to implement IDisposable
    {
        CartService.OnChange -= StateHasChanged; // Unsubscribe from the event
    }

    private void Increment(CartProductResponse product)
    {
        if(product.Quantity < 10)
            UpdateQuantity(product, product.Quantity + 1);
    }

    private void Decrement(CartProductResponse product)
    {
        if(product.Quantity > 1)
            UpdateQuantity(product, product.Quantity - 1);

    }
    private async Task LoadCart()
    {
        await CartService.GetCartItemsCount();
        cartProducts = await CartService.GetCartProducts();
        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }
    private async Task Placeorder()
    {
        await OrderService.PlaceOrderAsync();   
        await CartService.GetCartItemsCount();
        orderPlaced = true;
    }
}
