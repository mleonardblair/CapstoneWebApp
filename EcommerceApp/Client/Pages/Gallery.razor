@attribute [Route(RouteConstants.Gallery)]
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using EcommerceApp.Client.Shared.Home
@using MudBlazor

<div class="gallery-page">
    <MudProgressLinear Color="Color.Info" Value="@progressValue" />
</div>

<MudCarousel 
    Class="mud-carousel" 
    Style="" 
    @ref="carousel" 
    ShowArrows="false" 
    ShowBullets="false" 
    EnableSwipeGesture="true" 
    AutoCycle="false" 
    TData="object"
    @bind-SelectedIndex="currentIndex">
    @* WARNING : THE CONSTRAINTS OF A VERTICAL IMPLEMENTATION OF THE CAROUSEL WITH LOOP AROUND REMOVED ( AND JSINTEROP CALLING THE TRANSVERSAL METHODS ON SCROLL BEING INVERTED ) BECAUSE OF THE TRANSFORMATION 90 DEGREES, IMPLIES A CERTAIN AMOUNT OF CONFUSION WITH THE SLIDE TRANSITION ANIMATIONS ALSO INVERTED. AVOID OVERRIDING THE CAROUSEL TRANSITION ANIMATIONS, INSTEAD ORDER THE RAZOR COMPONENTS / IMAGES IN DESCENDING ORDER THAT THE PAGES SHOULD APPEAR IE: FIRST PAGE TO APPEAR BY DEFAULT AT THE BOTTOM, LAST AT THE TOP *@

    <MudCarouselItem Transition="@Transition.Slide" Color="@Color.Primary" >
        <Home1 OnItemChanged="OnCarouselItemChanged" />
    </MudCarouselItem>

    <MudCarouselItem Transition="@Transition.Slide" Color="@Color.Secondary">
        <Home2 OnItemChanged="OnCarouselItemChanged" />
    </MudCarouselItem>

    <MudCarouselItem Transition="@Transition.Slide" Color="@Color.Warning">
        <Home3 OnItemChanged="OnCarouselItemChanged" />
    </MudCarouselItem>

</MudCarousel>




@code {
    public Action<int> OnCarouselItemChanged { get; set; } // Callback to be passed to the carousel items

    public MudCarousel<object> carousel;
    private int totalItems = 3; // Total number of carousel items
    private int currentIndex = 0; // Current index of the carousel
    private double progressValue = 0; // Progress bar value
    private const int progressStep = 100; // Progress bar step
    private Transition transitionType = Transition.Custom; // Transition type of the carousel


    // This method used later to navigate through the carousel from JavaScript
    [JSInvokable("NextItem")]
    public void NextItem()
    {
        Console.WriteLine("DEBUG: NextItem called.");
        if (currentIndex < totalItems - 1)
        {
            currentIndex++;
            UpdateProgress(currentIndex);
        }
    }
    [JSInvokable("PrevItem")]
    public void PrevItem()
    {
        Console.WriteLine("DEBUG: PrevItem called.");
        if (currentIndex > 0)
        {
            currentIndex--;
            UpdateProgress(currentIndex);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollInterop.registerScrollEvent", DotNetObjectReference.Create(this));
        }
    }
    // Controls the progress bar value and updates the progress bar to indicate the user's transversal of the carousel.
    private void UpdateProgress(int index)
    {
        Console.WriteLine($"DEBUG: UpdateProgress: Index Changed: {index}"); // Debug statement
        progressValue = (index / (double)(totalItems - 1)) * progressStep;
        Console.WriteLine($"New Progress Value: {progressValue}"); // Debug statement
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        OnCarouselItemChanged = UpdateProgress; // Assigning UpdateProgress to the callback
    }
    
}
   