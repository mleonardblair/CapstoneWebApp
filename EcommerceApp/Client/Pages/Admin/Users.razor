@page "/admin-dashboard/users"
@inject ICategoryService CategoryService
@inject IAuthService AuthService
@attribute [Authorize(Roles = "Admin")]
@using System.Net.Http.Json
@inject HttpClient httpClient
@implements IDisposable

<MudContainer>
    <MudMainContent>
        <MudDataGrid T="AppUserDto" MultiSelection="true" Items="@appUsers" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">App Users</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="AppUserDto" />
                <PropertyColumn Property="x => x.FirstName" Title="First Name" />
                <PropertyColumn Property="x => x.LastName" Title="Last Name" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
                <PropertyColumn Property="x => x.Role" Title="Role" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="AppUserDto" />
            </PagerContent>
        </MudDataGrid>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
        </div>

        <MudExpansionPanels Style="flex:1">
            <MudExpansionPanel Text="Show Events">
                @foreach (var message in _events)
                {
                    <MudText Typo="@Typo.body2">@message</MudText>
                }
                @if (_events.Count > 0)
                {
                    <div class="d-flex">
                        <MudSpacer />
                        <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" OnClick="@(() => _events.Clear())">Clear</MudButton>
                    </div>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>
    </MudMainContent>
</MudContainer>
@code {
    private bool isLoading = true; // New flag to track loading state
    private IEnumerable<AppUserDto> appUsers = new List<AppUserDto>();
        private string _searchString;
        private bool _sortNameByLength;
        private List<string> _events = new();
        // custom sort by name length
        private Func<AppUserDto, object> _sortBy => x =>
        {
            if (_sortNameByLength)
                return x.FirstName.Length;
            else
                return x.LastName.Length;
        };
        // quick filter - filter globally across multiple columns with the same input
        private Func<AppUserDto, bool> _quickFilter => x =>
            {
                if (string.IsNullOrWhiteSpace(_searchString))
                    return true;

                if ($"{x.FirstName} {x.LastName} {x.Email} {x.Role}".Contains(_searchString))
                    return true;

                return false;
        };

        protected override async Task OnInitializedAsync()
        {
            isLoading = true; // Start loading
            Console.WriteLine("Loading users...");
            await AuthService.GetAllUserAdmin();
            isLoading = false; // Loading complete
            Console.WriteLine("Users loaded.");
            CategoryService.OnChange += StateHasChanged;
            appUsers = (await httpClient.GetFromJsonAsync<ServiceResponse<List<AppUserDto>>>("api/user/admin")).Data;
        }

     
    
  
    public void Dispose()
    {
        CategoryService.OnChange -= StateHasChanged;
    }



}
