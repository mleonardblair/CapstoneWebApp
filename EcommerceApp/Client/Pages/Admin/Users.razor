@page "/admin-dashboard/users"
@inject ICategoryService CategoryService
@inject IAuthService AuthService
@attribute [Authorize(Roles = "Admin")]
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
<MudContainer>
    <MudMainContent>
        <MudDataGrid T="AppUserDto" MultiSelection="true" Items="@appUsers" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">App Users</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="AppUserDto" />
                <PropertyColumn Property="x => x.FirstName" Title="First Name" />
                <PropertyColumn Property="x => x.LastName" Title="Last Name" />
                <PropertyColumn Property="x => x.Email" Title="Email" />
                <PropertyColumn Property="x => x.Role" Title="Role" />
                <TemplateColumn Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
                    <CellTemplate>
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => BeginEdit(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="AppUserDto" />
            </PagerContent>
        </MudDataGrid>
      
        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
        </div>

    </MudMainContent>
</MudContainer>

@code {
    private bool isLoading = true; // New flag to track loading state
    private IEnumerable<AppUserDto> appUsers = new List<AppUserDto>();
    private string _searchString;
    private bool _readOnly;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private Guid? editingRowId = null; // ID of the row being edited
    private bool _editTriggerRowClick;
    private bool _isCellEditMode;
    private AppUserDto currentEditUser;

    private async Task BeginEdit(AppUserDto user)
    {
        Guid Id = user.Id;
        NavigationManager.NavigateTo($"/admin-dashboard/users/{Id}"); // Replace with the appropriate identifier for your AppUserDto
        StateHasChanged();
    }


    // custom sort by name length
    private Func<AppUserDto, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.FirstName.Length;
        else
            return x.LastName.Length;
    };


    private async Task SaveEdit(AppUserDto updatedUser)
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/user/admin/{updatedUser.Id}", updatedUser);
            if (response.IsSuccessStatusCode)
            {
                appUsers = (await httpClient.GetFromJsonAsync<ServiceResponse<List<AppUserDto>>>("api/user/admin")).Data;
                CloseDialog();
            }
            else
            {
             //   Console.WriteLine("Failed to update user: " + await response.Content.ReadAsStringAsync()); // Log the error message
            }
        }
        catch (Exception ex)
        {
           // Console.WriteLine("Exception when trying to save user: " + ex.Message); // Log exception
        }
    }


    private void CloseDialog()
    {
        currentEditUser = null;
    }
    // quick filter - filter globally across multiple columns with the same input
    private Func<AppUserDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.FirstName} {x.LastName} {x.Email} {x.Role}".Contains(_searchString))
            return true;

        return false;
    };
    // events
    void StartedEditingItem(AppUserDto item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(AppUserDto item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(AppUserDto item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Start loading
        //Console.WriteLine("Loading users...");
        await AuthService.GetAllUserAdmin();
        isLoading = false; // Loading complete
      //  Console.WriteLine("Users loaded.");
        CategoryService.OnChange += StateHasChanged;
        appUsers = (await httpClient.GetFromJsonAsync<ServiceResponse<List<AppUserDto>>>("api/user/admin")).Data;
    }


  

}
