@page "/account-dashboard/favorites"
@using System.Security.Claims;
@inject IFavouriteService FavouriteService
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Favourites</PageTitle>

@if (_isLoading)
{
    <p>Loading...</p>
}
else if (!_favourites.Any())
{
    <p>No favourites found.</p>
}
else
{
    <MudTable Items="@_favourites">
        <HeaderContent>
            <MudTh>Favourite</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Added On</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ProductName</MudTd>
            <MudTd>@context.ProductPrice.ToString("C")</MudTd>
            <MudTd>@context.DateAddedToFavourite.ToString("yyyy-MM-dd")</MudTd>
            <MudTd>
                <MudButton Color="Color.Error" OnClick="@(() => RemoveFavourite(context.FavouriteId))">Remove</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<FavouriteProductResponse> _favourites = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userId = await GetUserIdAsync();
            // Use userId as needed, for example:
            if (userId.HasValue)
            {
                
                await LoadFavourites(userId);
            }
        }

        _isLoading = false;
    }

    private async Task LoadFavourites(Guid? userId)
    {
        var result = await FavouriteService.GetFavouritesByUserId(userId);
        if (result.Success)
        {
            _favourites = result.Data;
        }
        else
        {
            // Handle the error case, e.g., show a notification to the user.
        }
    }

    private async Task RemoveFavourite(Guid favouriteId)
    {
        var result = await FavouriteService.DeleteFavouriteAsync(favouriteId);
        if (result.Success)
        {
            // Optionally, show a success notification to the user.
            // Remove the favourite from the UI list.
            _favourites.RemoveAll(f => f.FavouriteId == favouriteId);
        }
        else
        {
            // Optionally, show an error notification to the user.
        }
    }
    private async Task<Guid?> GetUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
             //   Console.WriteLine($" User Id: {userId}");
                return userId;
            }
        }

        return null; // User is not authenticated or the claim is not a valid Guid
    }
}
