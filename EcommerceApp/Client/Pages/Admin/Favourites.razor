@page "/account-dashboard/favourites"
@using System.Security.Claims;
@inject IFavouriteService FavouriteService
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Wishlist</PageTitle>

@if (_isLoading)
{
     <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
         </div>
}
else if (FavouriteService.Favourites== null || FavouriteService.Favourites.Count == 0)
{
    <div class="d-flex justify-content-center align-items-center" style="height:100vh">

    <div class="">
        <MudText Typo="Typo.h5"> You've Not Favourited Anything.</MudText>
    </div>
    <div class="">
        <MudText Typo="Typo.h5"> To Add Favourites Go To </MudText>

        <a href="/shop/products/1" style="color:blue:"><MudText Typo="Typo.h5"> The Shop </MudText></a>

        <MudText Typo="Typo.h5"> Page.</MudText>
    </div>
    </div>
}
else
{
    <MudTable Items="@FavouriteService.Favourites">
        <HeaderContent>
            <MudTh>Favourite</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Added On</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.ProductName</MudTd>
            <MudTd>@context.ProductPrice.ToString("C")</MudTd>
            <MudTd>@context.DateAddedToFavourite.ToString("yyyy-MM-dd")</MudTd>
            <MudTd>
                <MudButton Color="Color.Error" OnClick="@(() => RemoveFavourite(context.FavouriteId))">Remove</MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
}
<ReusableResultSnackbar @ref="@resultSnackbar"
                        Message="@FavouriteService.SnackMessage"
                        Severity="@FavouriteService.Severity" />
@code {
    private bool _isLoading = true;
    private ReusableResultSnackbar? resultSnackbar;
    /// <summary>
    /// This method is called when the component is initialized.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        FavouriteService.FavouritesChanged += StateHasChanged;

        FavouriteService.UserId = await GetUserIdAsync();
        if (FavouriteService.UserId.HasValue)
        {
            await LoadFavourites(FavouriteService.UserId);
        }

        _isLoading = false;
    }

    /// <summary>
    /// Called when the component is disposed.
    /// </summary>
    public void Dispose()
    {
        FavouriteService.FavouritesChanged -= StateHasChanged;
    }
    /// <summary>
    /// This method loads the favourites for the specified user.
    /// </summary>
    /// <param name="userId"></param>
    /// <returns></returns>
    private async Task LoadFavourites(Guid? userId)
    {
        FavouriteService.Favourites = (await FavouriteService.GetFavouritesByUserId(userId)).Data;
        StateHasChanged();

    }

    /// <summary>
    /// This method removes the specified favourite.
    /// </summary>
    /// <param name="favouriteId"></param>
    /// <returns></returns>
    private async Task RemoveFavourite(Guid favouriteId)
    {
        var result = await FavouriteService.DeleteFavouriteAsync(favouriteId);
        if (result.Success)
        {
            FavouriteService.SnackMessage = $"Favourite removed successfully.";
            FavouriteService.Severity = Severity.Success;

        }
        else
        {
            FavouriteService.SnackMessage = $"Favourite removed failed!.";
            FavouriteService.Severity = Severity.Error;
        }
        resultSnackbar?.Show();
        FavouriteService?.ResetSnackbarMessage();
        await LoadFavourites(FavouriteService.UserId);


        // No need to manually update the list or call StateHasChanged here
    }

    /// <summary>
    /// This method gets the current user's ID.
    /// </summary>
    /// <returns></returns>
    private async Task<Guid?> GetUserIdAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out Guid userId))
            {
             //   Console.WriteLine($" User Id: {userId}");
                return userId;
            }
        }

        return null; // User is not authenticated or the claim is not a valid Guid
    }
}
