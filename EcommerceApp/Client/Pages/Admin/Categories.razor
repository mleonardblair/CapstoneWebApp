@page "/admin-dashboard/categories"
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<MudContainer>
    <MudMainContent>

        <MudText Style="padding:30px; display:flex; align-self:center; justify-self:center;" Typo="Typo.h5">Product Categories</MudText>
        <div class="header">
            <div class="col">Name</div>
            <div class="col">Description</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @if (isLoading)
        {
            <div class="d-flex align-items-center justify-content-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else
        {
            @foreach (var category in CategoryService.AdminCategories)
            {
                @if (category.Editing)
                {
                    <EditForm Model="editingCategory" OnSubmit="UpdateCategory">
                        <div class="row">
                            <div class="col">
                                <InputText @bind-Value="editingCategory.Name" class="form-control" />
                            </div>
                            <div class="col">
                                <InputText @bind-Value="editingCategory.Description" class="form-control" />
                            </div>
                            <div class="col col-visible">
                                <InputCheckbox @bind-Value="editingCategory.Visible" class="big-checkbox" />
                            </div>

                            <div class="col">
                                <button type="submit" class="btn btn-primary">
                                    <i class="oi oi-cloud-upload"></i>
                                </button>
                                <button class="btn btn-primary" @onclick="(()=>CancelEditing())">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            </div>
                        </div>
                    </EditForm>

                }
                else
                {
                    <div class="row">
                        <div class="col">
                            @category.Name
                        </div>
                        <div class="col">
                            @category.Description
                        </div>
                        <div class="col col-visible">
                            <span>@(category.Visible ? "✔️" : "")</span>
                        </div>
                        <div class="col">
                            <button class="btn btn-primary" @onclick="(()=>EditCategory(category))">
                                <i class="oi oi-pencil"></i>
                            </button>
                            <button class="btn btn-primary"  
                            @onclick="(()=>DeleteCategory(category.Id))">
                                <i class="oi oi-trash"></i>
                            </button>
                        </div>
                    </div>
                }

            }
        }
        <button class="btn btn-primary" @onclick="(()=>CreateNewCategory())" disabled="@IsAddNewDisabled">
            <i class="oi oi-plus"></i> Add new category
        </button>
        <ReusableResultSnackbar @ref="@resultSnackbar"
                                Message="@CategoryService.SnackMessage"
                                Severity="@CategoryService.Severity" />
    </MudMainContent>
</MudContainer>
@code {
    private string buttonStyle = "background-color: blue;"; // Default color
    private ReusableResultSnackbar? resultSnackbar;
    private bool IsAddNewDisabled = false;
    CategoryDto? editingCategory = null;
    private bool isLoading = true; // New flag to track loading state
    private string check = "✔️";
    protected override async Task OnInitializedAsync()
    {
        isLoading = true; // Start loading
        await CategoryService.GetAdminCategories();
        isLoading = false; // Loading complete
        CategoryService.OnChange += StateHasChanged;
    }

    public void Dispose() => CategoryService.OnChange -= StateHasChanged;

    private void CreateNewCategory()
    {
        editingCategory = CategoryService.CreateNewCategory();
        IsAddNewDisabled = true;
    }

    private void EditCategory(CategoryDto category)
    {
        category.Editing = true;
        IsAddNewDisabled = true;
        editingCategory = category;
    }

    private async Task UpdateCategory()
    {
        if (editingCategory != null)
        {
            if (editingCategory.IsNew)
                await CategoryService.AddCategory(editingCategory);
            else
                await CategoryService.UpdateCategory(editingCategory);
            editingCategory = new CategoryDto(); // or null, if that represents a default state in your 
            resultSnackbar?.Show();
            IsAddNewDisabled = false;
            CategoryService.ResetSnackbarMessage();
            editingCategory.Editing = false;
        }
    }

    private async Task CancelEditing()
    {
        editingCategory = new CategoryDto();
        IsAddNewDisabled = false;
        await CategoryService.GetAdminCategories();
    }

    private async Task DeleteCategory(Guid id) {
        await CategoryService.DeleteCategory(id);
        IsAddNewDisabled = false;
        resultSnackbar?.Show();
        CategoryService.ResetSnackbarMessage();
    }
  
}
