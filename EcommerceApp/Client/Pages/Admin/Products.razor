@page "/admin-dashboard/products"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IAuthService AuthService
@attribute [Authorize(Roles = "Admin")]
@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

@* Do some loading nstuff here*@

@if (isLoading)
{<MudContainer Class="lg-py-2" Style="padding-top:10rem">
    <MudMainContent>
        <MudText Typo="Typo.h6" Style="text-align:center;">Loading Products</MudText>
        <MudGrid Class="login-grid" Style="display:flex; justify-content:center;align-self:center; padding-top:100px;">
            <MudItem xs="12" lg="6" xl="6" Style="align-self:center">
                     <MudProgressCircular Color="Color.Default" Indeterminate="true" />

                </MudItem>
            </MudGrid>
        </MudMainContent>
    </MudContainer>
}
else{
<MudContainer>
    <MudMainContent>
        <MudDataGrid T="ProductDto" MultiSelection="true" Items="@products" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
                     Hideable="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Products</MudText> 
                <MudSpacer />
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    <MudButton Variant="Variant.Outlined" OnClick="CreateNew">Create New Product</MudButton>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="ProductDto" />
                <PropertyColumn Property="x => x.Name" Title="Name" />
                <PropertyColumn Property="x => x.Price" Title="Price" />
                <PropertyColumn Property="x => x.Description" Title="Description" />
                <PropertyColumn Property="x => x.StockQuantity" Title="Stock Quantity" />
                <PropertyColumn Property="x => GetCategoryName(x.CategoryId)" Title="Category" />
                <TemplateColumn Title="Thumbnail">
                    <CellTemplate>
                        <MudImage Src="@context.Item.ImageURI" Style="max-height:100px; max-width:100px; object-fit:contain; margin-right: 16px;" />
                        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit"
                                       OnClick="@(() => BeginEdit(context.Item))" />
                            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete"
                                           OnClick="@(() => BeginDelete(context.Item))" />
                    </CellTemplate>
                </TemplateColumn>

            </Columns>
            <PagerContent>
                <MudDataGridPager T="ProductDto" />
            </PagerContent>
        </MudDataGrid>

        <div class="d-flex flex-wrap mt-4">
            <MudSwitch @bind-Checked="@_sortNameByLength" Color="Color.Primary">Sort Name Column By Length</MudSwitch>
        </div>

    </MudMainContent>
</MudContainer>
}
@code {
    private bool isLoading = true;
    private IEnumerable<ProductDto> products = new List<ProductDto>();
    private Dictionary<Guid, string> categoryNames = new Dictionary<Guid, string>();
    private string _searchString;
    private bool _readOnly;
    private bool _sortNameByLength;
    private List<string> _events = new();
    private Guid? editingRowId = null;
    private bool _editTriggerRowClick;
    private bool _isCellEditMode;
    private ProductDto currentEditProduct;

    private async Task BeginEdit(ProductDto product)
    {
        Guid Id = product.Id;
        NavigationManager.NavigateTo($"/admin-dashboard/products/{Id}");
        StateHasChanged();
    }
    private async Task BeginDelete(ProductDto product)
    {
        // delete product
        var response = await httpClient.DeleteAsync($"api/product/admin/{product.Id}");
        if (response.IsSuccessStatusCode)
        {
            products = (await httpClient.GetFromJsonAsync<ServiceResponse<List<ProductDto>>>("api/product")).Data;
            CloseDialog();
        }
        else
        {
            Console.WriteLine("Failed to delete product: " + await response.Content.ReadAsStringAsync());
        }
        StateHasChanged();
    }
    private Func<ProductDto, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Price;
    };
    private async void CreateNew()
    {
        NavigationManager.NavigateTo($"/admin-dashboard/products/create"); 
    }
    private async Task SaveEdit(ProductDto updatedProduct)
    {
        try
        {
            var response = await httpClient.PutAsJsonAsync($"api/product/admin/{updatedProduct.Id}", updatedProduct);
            if (response.IsSuccessStatusCode)
            {
                products = (await httpClient.GetFromJsonAsync<ServiceResponse<List<ProductDto>>>("api/product")).Data;
                CloseDialog();
            }
            else
            {
                Console.WriteLine("Failed to update product: " + await response.Content.ReadAsStringAsync());
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception when trying to save product: " + ex.Message);
        }
    }

    private void CloseDialog()
    {
        currentEditProduct = null;
    }

    private Func<ProductDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if ($"{x.Name} {x.Price} {x.Description} {x.StockQuantity} {GetCategoryName(x.CategoryId)}".Contains(_searchString))
            return true;

        return false;
    };

    void StartedEditingItem(ProductDto item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(ProductDto item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(ProductDto item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await ProductService.GetAdminProducts();
        await LoadCategoryNames(); // Ensure this method is called to populate the dictionary
        isLoading = false;
        products = (await httpClient.GetFromJsonAsync<ServiceResponse<List<ProductDto>>>("api/products/admin")).Data;
        CategoryService.OnChange += StateHasChanged;
    }
    // Method to populate categoryNames dictionary from your service or API
    private async Task LoadCategoryNames()
    {
        var response = await CategoryService.GetCategoryNamesAsync();
        if (response != null && response.Success)
        {
            categoryNames = response.Data; // Assuming 'Data' holds the Dictionary
        }
        else
        {
            // Handle the error or fallback scenario
            Console.WriteLine("Failed to load category names");
        }
    }
    private string GetCategoryName(Guid categoryId)
    {
        if (categoryNames.TryGetValue(categoryId, out var name))
        {
            return name;
        }
        return "Unknown";
    }


}
