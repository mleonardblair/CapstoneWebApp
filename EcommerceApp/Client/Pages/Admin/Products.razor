@page "/admin-dashboard/products"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@attribute [Authorize(Roles = "Admin")]
@implements IDisposable

<MudContainer>
    <MudMainContent>

        <MudText Style="padding:30px" Typo="Typo.h6">Product Listings</MudText>

        <div class="header">
            <div class="col">Name</div>
            <div class="col">Description</div>
            <div class="col">Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
            <div class="col"></div>
        </div>
        @if (isLoading)
        {
            <div class="d-flex align-items-center justify-content-center">
                <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
            </div>
        }
        else
        {
            <ProductForm/>
            @foreach (var product in ProductService.AdminProducts)
            {
                @if (product.Editing)
                {
                    Console.WriteLine($"Editing product: {product.Name}");
                    <EditForm Model="editingProduct" OnSubmit="UpdateProduct">
                        <div class="row">
                            <div class="col" style="display:block;">
                                <img src="@product.ImageURI" alt="Thumbnail" class="product-thumbnail" style="display:block;max-height:500px;max-width:500px;"> <!-- This is where the image will be displayed -->
                            </div>
                            <div class="col">
                                <InputText 
                                    @bind-Value="editingProduct.Name" 
                                    class="form-control" />
                            </div>
                            <div class="col">
                                <InputText 
                                    @bind-Value="editingProduct.Description" 
                                    class="form-control" />
                            </div>
                            <div class="col">
                                <MudTextField Label="Price"
                                  HelperText="Enter price"
                                  Class="mt-3"
                                  @bind-Value="editingProduct.Price" For="@(() => editingProduct.Price)"
                                  />
                            </div>
                            <div class="col col-visible">
                                <InputCheckbox @bind-Value="editingProduct.Visible" class="big-checkbox" />
                            </div>

                            <div class="col">
                                <button type="submit" class="btn btn-primary">
                                    <i class="oi oi-cloud-upload"></i>
                                </button>
                                <button class="btn btn-primary" @onclick="(()=>CancelEditing())">
                                    <i class="oi oi-circle-x"></i>
                                </button>
                            </div>
                        </div>
                    </EditForm>

                }else {
                    <div class="row">
                        <div class="col">
                            @product.Name
                        </div>
                        <div class="col">
                            @product.Description
                        </div>
                           <div class="col">
                            @product.Price
                        </div>
                        <div class="col col-visible">
                            <span>@(product.Visible ? "✔️" : "")</span>"
                        </div>
                        <div class="col" style="text-align:right;">
                            <button class="btn btn-primary" @onclick="(()=>EditProduct(product))">
                                <i class="oi oi-pencil"></i>
                            </button>
                            <button class="btn btn-primary" @onclick="(()=>DeleteProduct(product.Id))">
                                <i class="oi oi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
   
            }
        }
        <button class="btn btn-primary" @onclick="(()=>CreateNewProduct())">
            <i class="oi oi-plus"></i> Add new product
        </button>

    </MudMainContent>
</MudContainer>
@code {
    ProductDto? editingProduct = null;
    private Dictionary<string, MudBlazor.Color> TagColors = new Dictionary<string, MudBlazor.Color>();
    private bool isLoading = true; // New flag to track loading state
    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAllCategoriesAsync();
        await ProductService.GetAllProductsAsync();
        isLoading = true; // Start loading
        await ProductService.GetAdminProducts();
        isLoading = false; // Loading complete
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private void CreateNewProduct()
    {
        Console.WriteLine("Creating a new product.");
        editingProduct = ProductService.CreateNewProduct();
    }


    private void EditProduct(ProductDto product)
    {
        Console.WriteLine($"Editing category: {product.Name}");

        // If another category is being edited, cancel that edit.
        if (editingProduct != null)
        {
            editingProduct.Editing = false;
        }

        // Toggle the editing mode for the current category.
        product.Editing = !product.Editing;
        editingProduct = product.Editing ? product : null;

        StateHasChanged();
    }



    private async Task UpdateProduct()
    {
        if (editingProduct != null)
        {
            Console.WriteLine($"Updating product: {editingProduct.Name}");
            if (editingProduct.IsNew)
            {
                await ProductService.AddProduct(editingProduct);
                Console.WriteLine("Added new product.");
            }
            else
            {
                await ProductService.UpdateProduct(editingProduct);
                Console.WriteLine("Updated existing product.");
            }

            // Set the Editing property to false to exit the editing mode.
            editingProduct.Editing = false;

            // Reset the editing category to clear the form fields.
            editingProduct = new ProductDto();

            // Optionally, refresh the categories list to show the updated data.
            await ProductService.GetAdminProducts();

            Console.WriteLine("Finished editing product.");
            StateHasChanged();
        }
        else
        {
            Console.WriteLine("UpdateProduct called but editingProduct is null.");
        }
    }




    private async Task CancelEditing()
    {
        Console.WriteLine("Cancelling edit.");
        editingProduct = new ProductDto();
        await ProductService.GetAdminProducts();
    }

    private async Task DeleteProduct(Guid id)
    {
        Console.WriteLine($"Deleting product with ID: {id}");
        await ProductService.DeleteProduct(id);

    }

}
