@page "/"
@using MudBlazor.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<MudBreakpointProvider OnBreakpointChanged="HandleBreakpointChange"></MudBreakpointProvider>


<PageTitle>Homepage</PageTitle>
<div class="gallery-page">
    <MudProgressLinear Color="Color.Info" Value="@progressValue" />
</div>
<MudContainer>

    <div class="homepage-container">
        <!-- Top section -->
        <div class="section">
            <div class="image-container">
                <img src="/images/ImagePlaceholder.svg" alt="Decorative Image">
            </div>
            <div class="text-container">
                 <MudText Typo="Typo.h4">Discover Home Decor</MudText>
                <p>Find the perfect piece to liven up your home.</p>
                <div class="button-container">
                    <MudButton Class="cta-button" OnClick="GoToGallery" Style="background-color:#EC7063;">See Gallery</MudButton>
                    <MudButton Class="cta-button" OnClick="GoToShop" Style="background-color:black; color:white;">Shop</MudButton>
                </div>
            </div>
        </div>
        <!-- Bottom section -->
        <div class="section">
            <div class="text-content">
                <MudText Typo="Typo.h4">Liven up your special event</MudText>
                <p>Glamorize your wedding or bridal shower.</p>
            </div>
            <div class="image-content">
                <img src="/images/ImagePlaceholder.svg" alt="Event Image">
            </div>
        </div>
    </div>

</MudContainer>
@*<style>
    @media (max-width: 599.98px) {
    section {
        height: calc(100vh - 56px - 64px); /* Adjusts the height of each section */
    }
}
@media (min-width: 600px) {
    section {
        height: calc(100vh - 64px - 64px); /* Adjusts the height of each section */
    }
}
</style>*@
@code {
    private string _paperStyle = "height: 200px;"; // Default height

    private void HandleBreakpointChange(Breakpoint breakpoint)
    {
        switch (breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                _paperStyle = "height: calc(100vh - 56px - 64px);";
                break;
            case Breakpoint.Md:
            case Breakpoint.Lg:
            case Breakpoint.Xl:
                _paperStyle = "height: calc(100vh - 64px - 64px);";
                break;
                // Include cases for other breakpoints if necessary
        }   
    }

    public Action<int> OnCarouselItemChanged { get; set; } // Callback to be passed to the carousel items

    public MudCarousel<object> carousel;
    private int totalItems = 3; // Total number of carousel items
    private int currentIndex = 0; // Current index of the carousel
    private double progressValue = 0; // Progress bar value
    private const int progressStep = 100; // Progress bar step
    private Transition transitionType = Transition.Custom; // Transition type of the carousel


    //// this method used later to navigate through the carousel from javascript
    //[jsinvokable("nextitem")]
    //public void nextitem()
    //{
    //    if (currentindex < totalitems - 1)
    //    {
    //        currentindex++;
    //        updateprogress(currentindex);
    //    }
    //}
    //[jsinvokable("previtem")]
    //public void previtem()
    //{
    //    if (currentindex > 0)
    //    {
    //        currentindex--;
    //        updateprogress(currentindex);
    //    }
    //}

    //protected override async task onafterrenderasync(bool firstrender)
    //{
    //    if (firstrender)
    //    {
    //        await jsruntime.invokevoidasync("scrollinterop.registerscrollevent", dotnetobjectreference.create(this));
    //    }
    //}
    // Controls the progress bar value and updates the progress bar to indicate the user's transversal of the carousel.
    private void UpdateProgress(int index)
    {
        //Console.WriteLine($"DEBUG: UpdateProgress: Index Changed: {index}"); // Debug statement
        progressValue = (index / (double)(totalItems - 1)) * progressStep;
        //Console.WriteLine($"New Progress Value: {progressValue}"); // Debug statement
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        OnCarouselItemChanged = UpdateProgress; // Assigning UpdateProgress to the callback
    }
    private void GoToShop()
    {
        NavigationManager.NavigateTo("/shop");
    }
    private void GoToGallery()
    {
        NavigationManager.NavigateTo("/gallery");
    }
}
