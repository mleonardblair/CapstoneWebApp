@page "/admin-dashboard/users/{Id:guid}"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

    @if (AppUser != null && Id != null)
    {
        <PageTitle>Edit User Details</PageTitle>
        <MudContainer Class="lg-py-2" Style="height: 100vh; display: flex; align-items: center; justify-content: center;">
            <MudPaper Elevation="1" Class="p-4" Style="max-width: 500px; width: 100%;">
                <MudText Typo="Typo.h3" GutterBottom="true" Align="Align.Center">Edit User Details</MudText>
                <EditForm Model="AppUser" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />

                    <MudTextField Label="First Name" @bind-Value="AppUser.FirstName" FullWidth Required />
                    <MudTextField Label="Last Name" @bind-Value="AppUser.LastName" FullWidth Required />
                    <MudTextField Label="Email" @bind-Value="AppUser.Email" FullWidth Required />
                    <MudSelect Label="Select Role" @bind-Value="AppUser.Role" FullWidth>
                    <MudSelectItem Value="string.Empty" Disabled>Select Roles</MudSelectItem>
                    @foreach (var role in new string[] { "Admin", "Customer" })
                        {
                            <MudSelectItem Value="@role">@role</MudSelectItem>
                        }
                    </MudSelect>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" FullWidth ButtonType="ButtonType.Submit">Save</MudButton>
                    <ValidationSummary />
                    </EditForm>
                    @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-3">
                    Fill out the form correctly to see the success message.
                </MudText>
            </MudPaper>
        </MudContainer>
    }
    else
    {
        <MudAlert Severity="Severity.Error">User not found</MudAlert>
    }
@code {
    [Parameter] public Guid Id { get; set; }

    private AppUserDto AppUser = null;

    private bool success = false;

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSetAsync();

        AppUser = (await httpClient.GetFromJsonAsync<ServiceResponse<AppUserDto>>($"api/user/admin/{Id}")).Data;
        Console.WriteLine(AppUser.Email);
    }

    private async Task HandleSubmit()
    {
        // You can perform any necessary validation here before saving the data
        if (string.IsNullOrWhiteSpace(AppUser.FirstName) || string.IsNullOrWhiteSpace(AppUser.LastName) || string.IsNullOrWhiteSpace(AppUser.Email))
        {
            // Handle validation errors if needed
            success = false;
        }
        else
        {
            // Save the data here
            // You can also add your logic to update the user data on the server
            // success = await SaveUserDataAsync();
            success = true;
            // update user in the database
            try
            {
                var response = await httpClient.PutAsJsonAsync($"api/user/admin/{AppUser.Id}", AppUser);
            }catch(Exception ex)
            {
                Console.WriteLine("Exception when trying to save user: " + ex.Message); // Log exception
            }

        }
    }
}
