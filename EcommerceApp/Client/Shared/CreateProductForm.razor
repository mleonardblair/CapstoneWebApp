@page "/products/create"
@using EcommerceApp.Shared.DTOs
@using System.Net.Http.Headers;
@inject HttpClient Http
@inject IProductService ProductService
@inject ICategoryService CategoryService // Added this line
@inject NavigationManager NavigationManager
@using EcommerceApp.Shared.Models
@using Newtonsoft.Json
@implements IDisposable 

<h3>Create Product</h3>
<EditForm Model="Product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>

                    <MudTextField Label="Name" @bind-Value="Product.Name" For="@(() => Product.Name)" />

                    <MudTextField Label="Description" Class="mt-3" @bind-Value="Product.Description" For="@(() => Product.Description)" />

                    <MudTextField Label="Price" HelperText="Enter price" Class="mt-3" @bind-Value="Product.Price" For="@(() => Product.Price)" InputType="InputType.Number" />


                    <MudSelect Label="Select Category" @bind-Value="Product.CategoryId" T="Guid">
                        <MudSelectItem Disabled="true" Value="Guid.Empty">Select Category</MudSelectItem>
                        @foreach (var category in CategoryService.Categories)
                        {
                            <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                        }
                    </MudSelect>


                    <MudTextField Label="Stock Quantity" HelperText="Enter stock quantity" Class="mt-3" @bind-Value="Product.StockQuantity" For="@(() => Product.StockQuantity)" InputType="InputType.Number" />

                    <MudFileUpload T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFiles2" MaximumFileCount="100">
                        <ButtonTemplate Context="fileUploadContext">
                            <MudButton HtmlTag="label"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload"
                                       for="@fileUploadContext">
                                Product Image
                            </MudButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Create</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4 mud-height-full">
                <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                @if (success)
                {
                    <MudText Color="Color.Success">Success</MudText>
                }
                else
                {
                    <MudText Color="@Color.Error">
                        <ValidationSummary />
                    </MudText>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudText Typo="Typo.body2" Align="Align.Center">
                Fill out the form correctly to see the success message.
            </MudText>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private ProductDto Product { get; set; } = new ProductDto();
    private bool success;

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async Task UploadFiles(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            this.files.Add(file);
            await UploadFileToServer(file);
        }
    }

    private async Task UploadFiles2(IBrowserFile file)
    {
        files.Add(file);
        await UploadFileToServer(file);
    }
    // Inside your UploadFileToServer method
    private async Task UploadFileToServer(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        var content = new MultipartFormDataContent();
        content.Headers.ContentDisposition = new ContentDispositionHeaderValue("form-data");
        content.Add(new ByteArrayContent(buffer), "file", file.Name);

        var response = await Http.PostAsync("api/blob/upload", content);
        if (response.IsSuccessStatusCode)
        {
            // Deserialize the response to ServiceResponse<BlobUploadResult> object
            var serviceResponse = await response.Content.ReadFromJsonAsync<ServiceResponse<BlobUploadResult>>();

            if (serviceResponse!= null && serviceResponse.Success)
            {
                Product.ImageURI = serviceResponse.Data.FileUrl;
                Console.WriteLine("All went well. " + Product.ImageURI);
            }
            else
            {
                Console.WriteLine($"Something went wrong: {serviceResponse.Message}");
            }
        }
        else
        {
            Console.WriteLine("It went bad");
        }
    }
    protected override void OnInitialized()
    {
        CategoryService.CategoriesChanged += StateHasChanged;
    }

    public void Dispose()
    {
        CategoryService.CategoriesChanged -= StateHasChanged;
    }

    private async Task HandleValidSubmit()
    {
        // Call the service to process the product data
        // You can use ProductService to save the Product object to your database or perform any other necessary actions.
        // For example:
        var result = await ProductService.CreateProductAsync(Product);

        if (result.Success)
        {
            // Product creation was successful
            success = true;
        }
        else
        {
            // Product creation failed
            success = false;
        }
    }
}
