@using EcommerceApp.Shared.DTOs;
@using EcommerceApp.Shared.Models;
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@* Add authorization stup so only an admin role can view.*@
<div>
<h3>New Product</h3>
 <form @onsubmit="HandleAddProduct">
    <div class="mb-3 row">
        <label for="productName" class="col-sm-2 col-form-label">Name</label>
        <div class="col-sm-10 col-md-8 col-lg-10 ">
            <input type="text" class="form-control" id="productName" @bind="NewProduct.Name">
        </div>
    </div>

    <div class="mb-3 row">
        <label for="exampleFormControlTextarea1" class="col-sm-2 col-form-label">Description</label>
        <div class="col-sm-10 col-md-8 col-lg-10 ">
            <textarea class="form-control" rows="3" id="exampleFormControlTextarea1" @bind="NewProduct.Description"></textarea>
        </div>
    </div>

    <div class="mb-3 row">
        <label for="productPrice" class="col-sm-2 col-form-label">Price</label>
        <div class="col-sm-10 col-md-8 col-lg-10 ">
            <input type="number" class="form-control" id="productPrice" @bind="NewProduct.Price">
        </div>
    </div>
    <div class="mb-3 row">
        <label for="productStock" class="col-sm-2 col-form-label">Stock</label>
        <div class="col-sm-10 col-md-8 col-lg-10 ">
            <input type="number" step=".01"class="form-control" id="productStock" @bind="NewProduct.StockQuantity">
        </div>
    </div>

    <div class="mb-3">
        <label for="productImage" class="form-label">Image</label>
        <InputFile id="productImage" OnChange="@OnImageUpload" class="form-control" />
    </div>


    <div class="mb-3">
        <label>Category:</label>
        @if(categories == null)
        {
            <span>Loading Categories...</span>
        }else{
            @foreach (var category in categories)
            {
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="categoryGroup" value="@category.Id" @onchange="UpdateCategoryId" checked="@(NewProduct.CategoryId == category.Id)" />
                    <label class="form-check-label">
                        @category.Name
                    </label>
                </div>
            }
        }
        
    </div>


    <div>
        <button class="btn btn-primary" type="submit">Add Product</button>
    </div>
</form>
<div>
    <span>@responseMessage</span>
</div>
    
</div>
@code {
    private string responseMessage = "", responseMessage2 = "";
    private ProductDto NewProduct = new ProductDto();
    private List<CategoryDto>? categories;  
    @* List to hold categories from the database *@

    protected override async Task OnInitializedAsync()
    {
        await CategoryService.GetAllCategoriesAsync();  // Fetch categories from the database
        categories = CategoryService.Categories;  // Assign the categories from the service to the local list
    }
    private void UpdateCategoryId(ChangeEventArgs e)
    {
        Console.WriteLine($"Category swapped to {e.Value.ToString()}");
        NewProduct.CategoryId = Guid.Parse(e.Value.ToString());
    }

    private async Task HandleAddProduct()
    {
        if (NewProduct.Image != null)
        {
            using var imageStream = new MemoryStream(NewProduct.Image);
            Console.WriteLine($"Name: {NewProduct.Name}, Description: {NewProduct.Description}");

            // Call the new method here
            var response = await ProductService.CreateProductAsync(NewProduct);

            if (response.Success)
            {
                responseMessage = "Product successfully added.";
                NavigationManager.NavigateTo("/shop");
            }
            else
            {
                responseMessage = $"Failed to add product: {response.Message}";
            }
        }
        else
        {
            responseMessage = $"No image added.";
        }
    }


    private async Task OnImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var imageFile = e.File;
            if (imageFile != null)
            {
                using var memoryStream = new MemoryStream();
                await imageFile.OpenReadStream(10 * 1024 * 1024).CopyToAsync(memoryStream);
                NewProduct.Image = memoryStream.ToArray();
                responseMessage = "Image uploaded successfully.";
            }
            else
            {
                responseMessage = "Failed to upload image.";
            }
        }catch (IOException ioException)
        {
        responseMessage = $"File size exceeds the maximum limit. Error: {ioException.Message}";
        }
        catch (Exception ex)
        {
        responseMessage = $"An error occurred while uploading the image: {ex.Message}";
        }
    }

}