@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ICartService CartService

<div class="dropdown">
    <MudIconButton Class="my-custom-hover-button dropdown-toggle user-button" Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" OnClick="@ToggleUserMenu" Style="transition: color 0.1s; " @onfocusout="HideUserMenu" >
        <i class="oi oi-person"></i>
    </MudIconButton>
    <div class="dropdown-menu dropdown-menu-right my-custom-dropdown @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="account-management" class="dropdown-item">My Account</a>
                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="Login?returnUrl=@NavigationManager.ToBaseRelativePath(NavigationManager.Uri)" class="dropdown-item">Login</a>
                <a href="register" class="dropdown-item">Register</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool showUserMenu = false;
    private string UserMenuCssClass => showUserMenu ? "show-menu" : "";

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorageService.RemoveItemAsync("authToken");
        await CartService.GetCartItemsCount();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }
}
